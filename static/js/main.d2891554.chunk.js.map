{"version":3,"sources":["logo.svg","Component/HeaderNavbar.jsx","Component/CardMovie.jsx","Record/MovieRcord.jsx","Component/CardRapper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderNavbar","Navbar","variant","style","height","backgroundColor","Brand","href","alt","src","logo","width","CardMovie","props","MovieData","item","rating","vote_average","Fragment","Col","xs","lg","md","marginTop","Card","className","Img","poster_path","Body","ProgressBar","now","label","borderRadius","position","bottom","right","Title","fontSize","original_title","Text","release_date","ContextMovie","createContext","MovieContaxt","useState","Moviedata","setMoviedata","load","setload","useEffect","fetch","then","response","json","data","predata","concat","results","Provider","value","children","CardRapper","useContext","result","paddingTop","map","key","onClick","preload","padding","color","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,qKCqB5BC,EAhBI,WACf,OACE,kBAACC,EAAA,EAAD,CAASC,QAAQ,OAAOC,MAAO,CAACC,OAAO,GAAGC,gBAAgB,YACxD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SACX,yBACRC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNP,OAAO,QACN,IAND,sB,+BC8BOQ,G,MAhCC,SAACC,GAEV,IAAMC,EAAUD,EAAME,KAEfC,EAA8B,GAAvBF,EAAUG,aAC3B,OACQ,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGnB,MAAO,CAACoB,UAAU,KAC3C,kBAACC,EAAA,EAAD,CACIC,UAAU,aAGZ,kBAACD,EAAA,EAAKE,IAAN,CAAUD,UAAU,UAAUvB,QAAQ,MAAMO,IAA4B,MAAvBK,EAAUa,YAAkB,kCAAkCb,EAAUa,YAAY,GAAIxB,MAAO,CAACC,OAAO,OACtJ,kBAACoB,EAAA,EAAKI,KAAN,KACE,kBAACC,EAAA,EAAD,CAAa3B,QAAQ,UAAW4B,IAAKd,EAASe,MAAK,UAAKf,EAAL,KAAgBb,MAAO,CAACC,OAAO,GAAGO,MAAM,GAAGqB,aAAa,GACzGC,SAAS,WAAWC,OAAO,EAAEC,MAAM,KAGrC,kBAACX,EAAA,EAAKY,MAAN,CAAYjC,MAAO,CAACkC,SAAS,KAAMvB,EAAUwB,gBAG7C,kBAACd,EAAA,EAAKe,KAAN,KACQzB,EAAU0B,oB,QCtB3BC,EAAaC,0BAKbC,EAAa,SAAA9B,GAAQ,IAAD,EAEA+B,mBAAS,IAFT,mBAExBC,EAFwB,KAEdC,EAFc,OAGVF,mBAAS,GAHC,mBAGxBG,EAHwB,KAGnBC,EAHmB,KAmB/B,OAXAC,qBAAU,WACRC,MAAM,oIAAD,OAAqIH,IAC3II,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,GAAa,SAAAS,GAAO,mBAAMA,EAAQC,OAAOF,EAAKG,kBAGhD,CAACV,IAKC,kBAACN,EAAaiB,SAAd,CAAuBC,MAAO,CAAC,CAACd,EAAUC,GAAc,CAACC,EAAKC,KAC3DnC,EAAM+C,WCUEC,EAlCE,WAAK,IAAD,EAEwBC,qBAAWrB,GAFnC,yCAEVsB,EAFU,kCAEcf,GAFd,WAMjB,OACI,yBAAKvB,UAAU,YAAYtB,MAAO,CAAC6D,WAAW,KAC5C,yBAAKvC,UAAU,OAEXsC,EAAOE,KAAI,SAAClD,GAAD,OACP,kBAAC,EAAD,CAAWA,KAAMA,EAAMmD,IAAKnD,EAAKuB,qBAKvC,4BAAQ6B,QAAS,kBAAInB,GAAQ,SAAAoB,GAAO,OAAEA,EAAQ,MAC5CjE,MAAO,CACLkE,QAAQ,EACR1D,MAAM,OACN0B,SAAS,GACTiC,MAAM,QACNjE,gBAAgB,UAChBkB,UAAU,KAPd,cAUY,2BAAOpB,MAAO,CAACkC,SAAS,KAAM0B,EAAOQ,OAArC,qBChBTC,MAZf,WACE,OAEA,kBAAC,EAAD,KACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAcgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2891554.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport {Navbar} from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport logo from '../logo.svg'\r\n\r\nconst HeaderNavbar=()=>{\r\n    return(\r\n      <Navbar  variant=\"dark\" style={{height:70,backgroundColor:\"#01856c\"}}>\r\n        <Navbar.Brand href=\"#home\" >\r\n                <img\r\n        alt=\"\"\r\n        src={logo}\r\n        width=\"80\"\r\n        height=\"100\"\r\n      />{' '}\r\n      Movie RatingList\r\n    </Navbar.Brand>\r\n  </Navbar>\r\n    )\r\n}\r\n\r\nexport default HeaderNavbar","import React,{useContext} from 'react'\r\nimport {Card,Col,ProgressBar} from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport \"./card.css\"\r\n\r\nconst CardMovie=(props)=>{\r\n\r\n       const MovieData=props.item\r\n\r\n        const rating=MovieData.vote_average*10\r\n    return(\r\n            <React.Fragment>\r\n              <Col  xs={6} lg={3} md={6} style={{marginTop:10}}>\r\n                <Card\r\n                    className=\"cardStyle\"\r\n                >\r\n\r\n                  <Card.Img className=\"cardimg\" variant=\"top\" src={MovieData.poster_path!=null?`https://image.tmdb.org/t/p/w500`+MovieData.poster_path:\"\"} style={{height:250}}/>\r\n                    <Card.Body>\r\n                      <ProgressBar variant=\"success\"  now={rating}  label={`${rating}%`} style={{height:40,width:40,borderRadius:50,\r\n                        position:\"absolute\",bottom:0,right:0\r\n                        }}\r\n                      />\r\n                      <Card.Title style={{fontSize:15}}>{MovieData.original_title}</Card.Title>\r\n    \r\n        \r\n                      <Card.Text>\r\n                            { MovieData.release_date}\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                </Card>         \r\n        \r\n                </Col>\r\n            </React.Fragment>       \r\n    )\r\n}\r\n\r\nexport default CardMovie","import React,{useState, useEffect, createContext} from 'react'\r\n\r\n// {popularity: 64.28, \r\n// vote_count: 14131, video: false, poster_path: \"/or06FN3Dka5tukK1e9sl16pB3iy.jpg\", id: 299534, …}\r\n\r\n\r\nexport const ContextMovie=createContext()\r\n\r\n// export const loadmore=createContext()\r\n\r\n\r\nexport const MovieContaxt=props=>{\r\n\r\n  const [Moviedata,setMoviedata]=useState([])\r\n  const [load,setload]=useState(1)\r\n  \r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    fetch(`https://api.themoviedb.org/3/discover/movie?api_key=81a5499013451ffd894029835478e7b1&language=en-US&sort_by=popularity.desc&page=${load}`)\r\n  .then(response => response.json())\r\n  .then(data =>{\r\n    setMoviedata(predata=>[...predata.concat(data.results)])\r\n  }\r\n  );\r\n},[load])\r\n\r\n\r\n    \r\n  return(\r\n    <ContextMovie.Provider value={[[Moviedata,setMoviedata],[load,setload]]}>\r\n      {props.children}    \r\n    </ContextMovie.Provider>\r\n  )\r\n}","import React,{useContext, useEffect} from 'react';\r\nimport CardMovie from './CardMovie'\r\nimport {ContextMovie} from '../Record/MovieRcord'\r\n\r\n\r\n\r\n\r\n\r\nconst CardRapper=()=>{\r\n\r\n   const [[result,setresult],[load,setload]]=useContext(ContextMovie)\r\n    \r\n    \r\n\r\n    return (\r\n        <div className=\"container\" style={{paddingTop:10}}>\r\n          <div className=\"row\">\r\n            {\r\n              result.map((item)=>(\r\n                  <CardMovie item={item} key={item.original_title}/>\r\n                 ))\r\n            }        \r\n            </div>\r\n            \r\n            <button onClick={()=>setload(preload=>preload+1)} \r\n              style={{\r\n                padding:5,\r\n                width:\"100%\",\r\n                fontSize:30,\r\n                color:\"white\",\r\n                backgroundColor:\"#107a67\",\r\n                marginTop:10\r\n              }}\r\n            \r\n            >Load more. <label style={{fontSize:20}}>{result.length} result loaded</label></button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default CardRapper","import React, { createContext } from 'react';\nimport HeaderNavbar from './Component/HeaderNavbar'\nimport CardRapper from \"./Component/CardRapper\"\nimport {MovieContaxt} from './Record/MovieRcord'\n\n\nfunction App() {\n  return (\n\n  <MovieContaxt>\n    <div className=\"App\">\n      <HeaderNavbar/>\n      <CardRapper/>\n    </div>\n  </MovieContaxt>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}